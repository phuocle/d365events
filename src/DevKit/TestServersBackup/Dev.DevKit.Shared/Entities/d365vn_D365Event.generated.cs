//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.d365vn_D365EventOptionSets
{
    public enum statecode
    {
        /// <summary>
        /// Active = 0
        /// </summary>
        Active = 0,
        /// <summary>
        /// Inactive = 1
        /// </summary>
        Inactive = 1
    }

    public enum statuscode
    {
        /// <summary>
        /// Active = 1
        /// </summary>
        Active = 1,
        /// <summary>
        /// Inactive = 2
        /// </summary>
        Inactive = 2
    }
}

namespace Dev.DevKit.Shared.Entities
{
    public partial class d365vn_D365Event : EntityBase
    {
        public struct Fields
        {
            public const string CreatedBy = "createdby";
            public const string CreatedOn = "createdon";
            public const string CreatedOnBehalfBy = "createdonbehalfby";
            public const string d365vn_D365EventId = "d365vn_d365eventid";
            public const string d365vn_name = "d365vn_name";
            public const string d365vn_Value1 = "d365vn_value1";
            public const string d365vn_Value2 = "d365vn_value2";
            public const string d365vn_Value3 = "d365vn_value3";
            public const string d365vn_ValueSum = "d365vn_valuesum";
            public const string ImportSequenceNumber = "importsequencenumber";
            public const string ModifiedBy = "modifiedby";
            public const string ModifiedOn = "modifiedon";
            public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
            public const string OverriddenCreatedOn = "overriddencreatedon";
            public const string OwnerId = "ownerid";
            public const string OwningBusinessUnit = "owningbusinessunit";
            public const string OwningTeam = "owningteam";
            public const string OwningUser = "owninguser";
            public const string statecode = "statecode";
            public const string statuscode = "statuscode";
            public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
            public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
            public const string VersionNumber = "versionnumber";
        }

        public const string EntityLogicalName = "d365vn_d365event";

        public const int EntityTypeCode = 10767;

        [DebuggerNonUserCode()]
        public d365vn_D365Event()
        {
            Entity = new Entity(EntityLogicalName);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public d365vn_D365Event(Guid d365vn_D365EventId)
        {
            Entity = new Entity(EntityLogicalName, d365vn_D365EventId);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public d365vn_D365Event(string keyName, object keyValue)
        {
            Entity = new Entity(EntityLogicalName, keyName, keyValue);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public d365vn_D365Event(Entity entity)
        {
            Entity = entity;
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public d365vn_D365Event(Entity entity, Entity merge)
        {
            Entity = entity;
            foreach (var property in merge?.Attributes)
            {
                var key = property.Key;
                var value = property.Value;
                Entity[key] = value;
            }
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public d365vn_D365Event(KeyAttributeCollection keys)
        {
            Entity = new Entity(EntityLogicalName, keys);
            PreEntity = CloneThisEntity(Entity);
        }

        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Created By</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference CreatedBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
        }

        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Created On</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? CreatedOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
        }

        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Created By (Delegate)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference CreatedOnBehalfBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
        }

        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Primary Key - Uniqueidentifier</para>
        /// <para>D365 Event</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid d365vn_D365EventId
        {
            get { return Id; }
            set
            {
                Entity.Attributes[Fields.d365vn_D365EventId] = value;
                Entity.Id = value;
            }
        }

        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Required - String - MaxLength: 100</para>
        /// <para>Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string d365vn_name
        {
            get { return Entity.GetAttributeValue<string>(Fields.d365vn_name); }
            set { Entity.Attributes[Fields.d365vn_name] = value; }
        }

        /// <summary>
        /// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
        /// <para>Value 1</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? d365vn_Value1
        {
            get { return Entity.GetAttributeValue<int?>(Fields.d365vn_Value1); }
            set { Entity.Attributes[Fields.d365vn_Value1] = value; }
        }

        /// <summary>
        /// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
        /// <para>Value 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? d365vn_Value2
        {
            get { return Entity.GetAttributeValue<int?>(Fields.d365vn_Value2); }
            set { Entity.Attributes[Fields.d365vn_Value2] = value; }
        }

        /// <summary>
        /// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
        /// <para>Value 3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? d365vn_Value3
        {
            get { return Entity.GetAttributeValue<int?>(Fields.d365vn_Value3); }
            set { Entity.Attributes[Fields.d365vn_Value3] = value; }
        }

        /// <summary>
        /// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
        /// <para>Value Sum</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? d365vn_ValueSum
        {
            get { return Entity.GetAttributeValue<int?>(Fields.d365vn_ValueSum); }
            set { Entity.Attributes[Fields.d365vn_ValueSum] = value; }
        }

        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
        /// <para>Import Sequence Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? ImportSequenceNumber
        {
            get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
            set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
        }

        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Modified By</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ModifiedBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
        }

        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Modified On</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? ModifiedOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
        }

        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Modified By (Delegate)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ModifiedOnBehalfBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
        }

        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
        /// <para>Record Created On</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? OverriddenCreatedOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
            set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
        }

        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Owner</para>
        /// <para>Owner</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwnerId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
            set { Entity.Attributes[Fields.OwnerId] = value; }
        }

        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>ReadOnly - Lookup to businessunit</para>
        /// <para>Owning Business Unit</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwningBusinessUnit
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
        }

        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>ReadOnly - Lookup to team</para>
        /// <para>Owning Team</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwningTeam
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
        }

        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Owning User</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwningUser
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
        }

        /// <summary>
        /// <para>Status of the D365 Event</para>
        /// <para>State</para>
        /// <para>Status</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.d365vn_D365EventOptionSets.statecode? statecode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.d365vn_D365EventOptionSets.statecode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.statecode] = null;
            }
        }

        /// <summary>
        /// <para>Reason for the status of the D365 Event</para>
        /// <para>Status</para>
        /// <para>Status Reason</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.d365vn_D365EventOptionSets.statuscode? statuscode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.d365vn_D365EventOptionSets.statuscode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.statuscode] = null;
            }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
        /// <para>Time Zone Rule Version Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? TimeZoneRuleVersionNumber
        {
            get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
            set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
        }

        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
        /// <para>UTC Conversion Time Zone Code</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? UTCConversionTimeZoneCode
        {
            get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
            set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
        }

        /// <summary>
        /// <para>Version Number</para>
        /// <para>ReadOnly - BigInt</para>
        /// <para>Version Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public long? VersionNumber
        {
            get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
        }
    }
}

